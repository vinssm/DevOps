- Git is a Distributed Version Control System.
	. In this situation everybody has a local repository.
- SVN is Central Version control System.
	. a central VCS is located in one place.




			Helpful GIT Commands:

- Set Config Values:

	git config --global user.name "Vinay"
	git config --global user.email "someemail"

These are the global values to check who made the changes or code changes.

To check the config values:  git config --list

- git config is the first verb or action that we use.



Initialize Local Git Repository:

	git init


Adds all files in local Source Directory:

	git add . (or)
	git add --all


Removes Specific Files:

	git rm --cached filename.sh


Shows all files to be Commited:

	git status


Creates the connection to where you are pushing - repository:

	git remote add localbranchname


Associate a local and remote branch:

	git push --set-upstream origin remotebranchname


Create a local branch and switch to it:

	git checkout -b localbranchname / remotebranchname


Making changes:

	git commit -a -m 'made a change'  (or)
	git commit -am "made a change"   (or)
	git commit -m "made a change"

Branch renaming:

	git checkout oldname
	git branch -m oldname newname

Merging changes:

	git checkout master / branch (you want to merge to)

eg:   git checkout feature branch


Show remote repositoris:

	git remote
	git remote -v

Also refer to .git/config


get data from remote:

	git fetch remote -name

Pushing to remotes:

	git push origin master
	git push localbranchname master
	git push

Pushing to remote branches:
	
	git push origin localbranchname
	git push (connector) localbranchname
	git push localbranchname remotebranchname

Checkout Remote Branches:

	git checkout -b hotfix origin/localbranchname

Tracking Branches:

	git checkout --track origin/featurebranch
	git checkout featurebranch

Deleting Remote Branches:

	git push origin --delete remotebranchname

Deleting Local Branch:

	git branch -d localbranchname

Fetch al remote Branches:

	git branch -v -a

Hard reset to Masrter:

	git fetch origin && git reset --hard origin/master && git clean -f -d


		GIT WorkFlow:

- Fetch and Merge changes from the remote
- create a branch to work on a new project feture
- Develop the feature on your branch and commit your work
- Fetch and merge from the remote again (in case new commits were made while you were working)
- Push your branch up to the remote for review.

Undo a merge:

	- ON CLI: git merge --abort
	          git reset --hard


Git Push: git push origin <filename>


- git clone -> creates a local copy of a remote
- git remote -v -> lists a git project remotes
- git fetch -> fetches work from remote into the local copy (repo)

- git merge origin/master merges origin/master into your local branch

- git push origin <branch name> pushes local branch into the origin

- Merge Conflicts

- git diff

- git whatchanged


Getting Started:

- Two common senarios :- 

	1. an existing project on your local machine, that you want to start tracking using git.
	2. When ever there is an existing project that you want to start developing on.


	############ Initialize Repository from existing code ##############

		git init  (will initialize empty git repository)


eg: locate the code base you want to start tracking using git   -ls

	- you will see a .git directory
	- This .git directory contains everything that relate to our repository

Note: if we ever want to stop tracking our project with git, all we have to do is   ######  rm -rf .git #######

- we are using git but we never commited anything.

		" Before we commit "
		
		     git status

- When we run git status you can see the untracked files.

- on a personal computer you have files and you don't to add those files to the repository, so ignore those files for that you need to create ignore file.

			touch .gitignore

- which will create that .gitignore file.

- gitignore file is just a simple text file, where we can add files that we want git ignore and we can also use wildcards.

- with git there are 3 stages to remember:

 		Working Directory
		Staging Directory
		Commited files

-  untracked and modified files will be in our working directory.

		###### Important Commands to remember #######

	git add
	git status
	git commit -m "message"
	git push origin master

	git chekout (branch name)

	
-----------------------------

git :q - to exit

git revert HEAD

git :x 

git log

git revert --no-edit (note: --no-edit bypasses the message editor)

fatal: refusing to merge unrelated histories : Perform below git - command 
git pull origin <branch> --allow-unrelated-histories


git rm -r --cached node_modules
